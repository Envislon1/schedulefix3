
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hzqnccsmejplilhmisgu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh6cW5jY3NtZWpwbGlsaG1pc2d1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0NjA4MzEsImV4cCI6MjA2MDAzNjgzMX0.ou3o4WiB7NDmU7Mj0kiwXYuf1OjFK_WxmwBGy2d_Dhs";

// Define a type for the server time response
export type ServerTimeResponse = {
  server_time: string;
  timezone: string;
  timestamp_utc: string;
  unix_timestamp: number;
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Get current server time from Edge Function
 * This function tries multiple methods to get server time
 */
export async function getServerTime(): Promise<ServerTimeResponse | null> {
  try {
    // First try the SQL function
    const { data, error } = await supabase.rpc('get_current_time');
    
    if (!error && data) {
      console.log('Got server time via SQL RPC function');
      return data as ServerTimeResponse;
    }
    
    // If SQL function fails, try the edge function
    console.log('SQL function failed, trying edge function');
    try {
      const response = await fetch(
        `${SUPABASE_URL}/functions/v1/get-current-time`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
          }
        }
      );
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Server returned ${response.status}: ${errorText}`);
        throw new Error(`Failed to get server time: ${errorText}`);
      }
      
      const data = await response.json();
      console.log('Got server time via edge function');
      return data as ServerTimeResponse;
    } catch (edgeFunctionError) {
      console.error('Edge function error:', edgeFunctionError);
      
      // Last resort: use local time with UTC conversion
      console.log('Using local time as fallback');
      const now = new Date();
      const utcTime = new Date(now.toUTCString());
      
      return {
        server_time: now.toISOString(),
        timezone: "UTC (client-side fallback)",
        timestamp_utc: utcTime.toISOString(),
        unix_timestamp: Math.floor(now.getTime() / 1000)
      };
    }
  } catch (error) {
    console.error('Error in getServerTime:', error);
    throw error; // Let the caller handle this error
  }
}
